- when:
    - not ansible_check_mode
    - ansible_host | regex_search('(centos|rocky)*.*-minimal')
  vars:
    dockerfile_builder_image: "{{ container_image }}_prepare"
  block:
  - name: build image
    vars:
      dockerfile_builder_force: true
    include_role:
      name: dockerfile_builder

  - name: enable arm64 emulation
    when: "{{ docker_config_arm64_emulation | default(false) }}"
    command: "{{ dockerfile_builder }} run --privileged --rm tonistiigi/binfmt --install arm64"

  - name: get distro-release for multi arch manifests
    loop: "{{ dockerfile_builder_platforms }}"
    register: prepare_distro_release_task
    changed_when: false
    vars:
      prepare_distro_release_image_digest:
        "{{ dockerfile_builder_image_info.manifest.manifests | default([])
          | selectattr('platform.os', 'equalto', item.split('/')[0])
          |  selectattr('platform.architecture', 'equalto', item.split('/')[1])
          | map(attribute='digest') | first }}"
      prepare_distro_release_image: "{{ dockerfile_builder_image }}@{{ prepare_distro_release_image_digest }}"
    command: "{{ dockerfile_builder }} run --rm {{ prepare_distro_release_image }} rpm -qa"

  - name: save new distro release
    set_fact:
      centos_distro_release: "{{ prepare_distro_release_task.results | selectattr('item', 'equalto', 'linux/amd64')
        | map(attribute='stdout_lines') | first | map('regex_search',distro_version_regex)
        | select('string') | first }}"

  - name: set version based on distro-release
    when: centos_distro_release is defined
    set_fact:
      version_image_major: "{{ centos_distro_release.split('.')[0] |
        default(false) }}"
      version_image_minor: "{{ centos_distro_release.split('.')[1].split('-')[0] |
        default(false) }}"
      version_image_patch: "{{ centos_distro_release.split('.')[1].split('-')[1] |
        default(centos_distro_release.split('.')[2]) | default(false) }}"

  - name: store pkg-list
    loop: "{{ prepare_distro_release_task.results }}"
    no_log: true
    register: prepare_store_pkg_list_task
    copy:
      dest: "{{ pkgs_list_dest }}_{{ item.item.split('/')[0] }}_{{ item.item.split('/')[1] }}"
      content: |
        {% for line in item.stdout_lines | sort %}
        {{ line }}
        {% endfor %}

  - name: force build or omit it if pkg list has changed
    set_fact:
      dockerfile_builder_build_omit: "{{ prepare_store_pkg_list_task is not changed }}"
      dockerfile_builder_force_source: "{{ prepare_store_pkg_list_task is changed }}"
      dockerfile_builder_force: "{{ prepare_store_pkg_list_task is changed }}"
