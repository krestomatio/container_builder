# {{ ansible_managed  }}
{% if moodle_app_src is defined %}
FROM {{ dockerfile_builder_image_from }} AS app-src

# Component bash variables
ENV GIT_DEST="/opt/app/" \
    APP_DEST=/var/www/html

USER 0
WORKDIR ${GIT_DEST}

# Install deps
COPY conf/usr/bin /usr/bin/
COPY conf/container-entrypoint.d ${CTR_ENTRYPOINT_OPT_PATH}/
RUN install-pkgs git rsync php-json unzip && \
    mkdir -p ${GIT_DEST} ${APP_DEST}

# Get source code
# Arguments for moodle git remote, branch and commit
# They are also a mechanism to invalidate cache if changed
ARG GIT_REMOTE="{{ dockerfile_builder_image_git_remote }}"
ARG GIT_BRANCH="{{ moodle_git_branch }}"
ARG GIT_COMMIT=""
ENV GIT_COMMIT=${GIT_COMMIT}
RUN git clone --branch "${GIT_BRANCH}" --depth 1 \
    "${GIT_REMOTE}" "${GIT_DEST}"

# Verify commit, if any
RUN if [ -n "${GIT_COMMIT}" ]; then app-git -v; fi

# Move src to app destination without .git files
RUN app-git -v -a -e '.git*'

COPY conf/usr/libexec /usr/libexec/

# Install additional plugins, a comma separated arg, (if any)
# Argument is also a mechanism to invalidate cache if changed
ARG MOODLE_PLUGIN_LIST="{{ moodle_plugin_list | default('') }}"
RUN if [ -n "${MOODLE_PLUGIN_LIST}" ]; then /usr/libexec/moodle/install-plugin-list -p "${MOODLE_PLUGIN_LIST}"; fi

{% endif %}
{% if moodle_php_redis_build | default(false) %}
FROM {{ dockerfile_builder_image_from }} AS php-redis-builder

USER 0

RUN install-pkgs php-pear php-devel make libzstd-devel
RUN pecl install -D 'enable-redis-igbinary="yes" enable-redis-lzf="yes" enable-redis-zstd="yes"' igbinary redis
RUN chmod 755 /usr/lib64/php/modules/{redis.so,igbinary.so}

{% endif %}
FROM {{ dockerfile_builder_image_from }}

# General ansible variables
ENV IMAGE_NAME={{ dockerfile_builder_image_name | default('moodle_php-fpm') }} \
    IMAGE_SUMMARY="{{ dockerfile_builder_image_summary | default('PHP ' + php_version + ' for Moodle ' + moodle_version) }}" \
    IMAGE_DESCRIPTION="{{ dockerfile_builder_image_description | default('This ' + dockerfile_builder_image_based + ' based container image runs PHP ' + php_version + ' for Moodle ' + moodle_version) }}" \
    IMAGE_TITLE="{{ dockerfile_builder_image_title | default('PHP ' + php_version + ' for Moodle ' + moodle_version) }}" \
    IMAGE_OC_TAGS="{{ dockerfile_builder_image_ocp_tags | default('${IMAGE_NAME},php,php-fpm,php${PHP_VER_SHORT},php-${PHP_VER_SHORT},moodle,moodle${MOODLE_VERSION_SHORT},moodle-${MOODLE_VERSION_SHORT}') }}" \
    TZ="{{ dockerfile_builder_image_timezone }}" \
    LANG="en_AU.UTF-8"

# Component bash variables
ENV MOODLE_VERSION="{{ moodle_version }}" \
    MOODLE_VERSION_SHORT="{{ moodle_version | replace('.','') }}" \
    MOODLE_APP=${APP_DEST} \
    MOODLE_DATA=/var/moodledata \
    MOODLE_CLI_TOOLS=/usr/libexec/moodle

# php-curl included in php-common
# php-zip as php-pecl-zip
# php-xsl as php-xml
# php-fpm php-cli php-opcache already installed in base image
ENV MOODLE_INSTALL_PHP_PKGS="php-gd php-intl php-ldap php-pgsql php-soap php-xmlrpc php-xml php-pecl-zip php-mbstring php-json"

USER 0

COPY conf/usr/bin /usr/bin/
COPY conf/usr/libexec /usr/libexec/
COPY conf/container-entrypoint.d ${CTR_ENTRYPOINT_OPT_PATH}/
{% if moodle_php_redis_build | default(false) %}
COPY --from=php-redis-builder /usr/lib64/php/modules/redis.so /usr/lib64/php/modules/redis.so
COPY --from=php-redis-builder /usr/lib64/php/modules/igbinary.so /usr/lib64/php/modules/igbinary.so
{% endif %}

RUN container-setup-php-moodle

USER ${CTR_USER_ID}

{% if moodle_app_src is defined %}
ARG MOODLE_COMMIT=""
ENV MOODLE_COMMIT=${MOODLE_COMMIT} \
    MOODLE_VERSION_NUMBER="{{ moodle_git_source_version_number }}" \
    MOODLE_PLUGIN_LIST="{{ moodle_plugin_list | default('') }}"

COPY --chown=${CTR_USER_ID}:${CTR_GROUP_ID:-0} --from=app-src {{ moodle_code_copy_path | default('/var/www/html/') }} {{ moodle_code_copy_dest | default('/var/www/html') }}

{% endif %}
# Labels
LABEL name="${IMAGE_NAME}" \
      summary="${IMAGE_SUMMARY}" \
      description="${IMAGE_DESCRIPTION}" \
      maintainer="{{ dockerfile_builder_image_authors }}" \
      org.opencontainers.image.title="${IMAGE_TITLE}" \
      org.opencontainers.image.description="${IMAGE_DESCRIPTION}" \
      org.opencontainers.image.version="{{ dockerfile_builder_image_version }}" \
      io.k8s.description="${IMAGE_DESCRIPTION}" \
      io.k8s.display-name="${IMAGE_TITLE}" \
      io.openshift.tags="${IMAGE_OC_TAGS}"
