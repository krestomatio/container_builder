# readme
ctr_readme_section: |-
  This {{ dockerfile_builder_image_based }} based container image runs PHP {{ php_version }} (default) or NGINX {{ nginx_version }} for Moodle {{ moodle_version }}. Use it as an inmutable image packing Moodle source, (optionally) moodle plugins, and executables for php-fpm and nginx.

  It includes a copy of Moodle source code, ready in the image public folder. A specific git commit is used to get the Moodle source version. That commit is fetch every build from remote repo to keep it up to date.  It is build from the latest available Moodle version (depending on the remote repo and branch set).

  ## Details
  {% if moodle_git_source_version is defined %}
  * Moodle version: {{ moodle_git_source_version }}
  {% endif %}
  {% if moodle_git_source_version_number is defined %}
  * Moodle version number: {{ moodle_git_source_version_number }}
  {% endif %}
  {% if moodle_git_commit is defined %}
  * Moodle commit: {{ moodle_git_commit }}
  {% endif %}
  {% if moodle_git_branch is defined %}
  * Moodle remote branch: {{ moodle_git_branch | replace('_','\_') }}
  {% endif %}

  {% if moodle_app_src is defined %}
  ## Custom builds
  This Dockerfile allows for changing Moodle remote, its branch and installing Moodle plugins. For that purpose, use build args to customize the build as you need.
  ### Moodle remote
  For building from a different Moodle remote branch, use `GIT_REMOTE`:
  ```
  docker build . -t my_moodle_image:my_tag \
      --build-arg GIT_REMOTE='https://github.com/moodle/moodle.git'
  ```

  ### Moodle branch
  For building from a different Moodle remote branch, use `GIT_BRANCH`:
  ```
  docker build . -t my_moodle_image:my_tag \
      --build-arg GIT_BRANCH='MOODLE_400_STABLE'
  ```

  ### Moodle plugins
  For installing plugins while building the main Dockerfile (slower), use `MOODLE_PLUGIN_LIST`:
  ```
  docker build . -t my_moodle_image:my_tag \
      --build-arg MOODLE_PLUGIN_LIST='mod_jitsi,mod_customcert'
  ```
  For building only to install additional moodle plugins (faster), create a Dockerfile like the following and then build.
  Example of `Dockerfile.plugins`:
  ```dockerfile
  # Dockerfile.plugins
  FROM quay.io/krestomatio/moodle_web:{{ moodle_version }}

  # Install additional plugins, a comma separated arg, (if any)
  # Argument is also a mechanism to invalidate cache if changed
  ARG MOODLE_PLUGIN_LIST=""
  ENV MOODLE_PLUGIN_LIST=${MOODLE_PLUGIN_LIST}
  RUN if [ -n "${MOODLE_PLUGIN_LIST}" ]; then /usr/libexec/moodle/install-plugin-list -p "${MOODLE_PLUGIN_LIST}"; fi && \
      rm -rf /tmp/moodle-plugins
  ```
  Example of build using `Dockerfile.plugins`:
  ```
  # Build
  docker build . -t my_moodle_image:my_tag \
      -f Dockerfile.plugins \
      --build-arg MOODLE_PLUGIN_LIST='mod_jitsi,mod_customcert'
  ```
  {% endif %}

  ## PHP-FPM or NGINX
  The image packs both programs: PHP-FPM and Nginx. However, it only runs one, with a non-root user. This design is for those programs to run in different containers, using one image. By default, in a Kubernetes cluster, it runs php-fpm with user 48. For nginx, set pod args to 'nginx' and run it as user 999. For a OKD cluster, setting args to `nginx` will suffice.
  ### Configuration files
  For adjusting PHP-FPM or Nginx config, just place the .ini or .conf files in the respective folders.
  - `/etc/php.d/`: PHP .ini extra configuration
  - `/etc/php-fpm.d/`: PHP-FPM .conf extra configuration
  - `/etc/nginx/default.d/`: Nginx .conf server extra configuration
