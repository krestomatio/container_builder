# {{ ansible_managed  }}
{% if ansible_host == 'graphql-engine-base' %}
ARG ARG_IMAGE_FROM={{ dockerfile_builder_image_from }}
FROM ${ARG_IMAGE_FROM}

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8 \
    GRAPHQL_ENGINE_VERSION="{{ graphql_engine_version }}" \
    POSTGRES_MAJOR_VERSION="{{ postgres_major_version }}"

RUN microdnf module enable postgresql:${POSTGRES_MAJOR_VERSION} && \
    install-pkgs libpq unixODBC mysql-libs
{% endif %}
{% if ansible_host == 'graphql-engine-build' %}
ARG ARG_IMAGE_FROM={{ dockerfile_builder_image_from }}
FROM ${ARG_IMAGE_FROM} AS graphql-engine-builder

ENV GHC_VERSION="8.10.2" \
    OS_INSTALL_PKGS="binutils upx make curl git tar xz postgresql gcc gcc-c++ gmp gmp-devel ncurses ncurses-devel ncurses-compat-libs perl mysql-devel pcre pcre-devel ca-certificates krb5-libs numactl-libs libpq libpq-devel unixODBC-devel"

RUN install-pkgs -e ${OS_INSTALL_PKGS}

RUN curl "https://downloads.haskell.org/~ghc/${GHC_VERSION}/ghc-${GHC_VERSION}-$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/')-centos7-$(uname -s | tr '[:upper:]' '[:lower:]').tar.xz" | tar xJ  && \
    pushd ghc-${GHC_VERSION} && ./configure && make install && \
    popd && rm -rf ghc-${GHC_VERSION}

RUN curl https://gitlab.haskell.org/haskell/ghcup/raw/master/ghcup > /usr/local/bin/ghcup && \
    chmod +x /usr/local/bin/ghcup && \
    ghcup install-cabal && \
    cp -rp ~/.ghcup/bin/cabal /usr/local/bin/cabal

RUN git clone -b v${GRAPHQL_ENGINE_VERSION} https://github.com/hasura/graphql-engine /repo/graphql-engine

WORKDIR /repo/graphql-engine

ARG GHC_OPTION_MEMORY
ARG GHC_OPTION_OPTIMIZATION
ARG GHC_OPTION_NUM_JOBS

ENV GHC_OPTION_MEMORY=${GHC_OPTION_MEMORY:-15000m} \
    GHC_OPTION_OPTIMIZATION=${GHC_OPTION_OPTIMIZATION:-1} \
    GHC_OPTION_NUM_JOBS=${GHC_OPTION_NUM_JOBS:-}

RUN cabal update  && \
    echo "GHC_OPTION_MEMORY: ${GHC_OPTION_MEMORY}, GHC_OPTION_OPTIMIZATION: ${GHC_OPTION_OPTIMIZATION}, GHC_OPTION_NUM_JOBS: ${GHC_OPTION_NUM_JOBS}" && \
    cabal build exe:graphql-engine --ghc-options="+RTS -M${GHC_OPTION_MEMORY} -A128m -n2m -N -RTS -O${GHC_OPTION_OPTIMIZATION} -j${GHC_OPTION_NUM_JOBS}" -j${GHC_OPTION_NUM_JOBS} && \
    mv `find dist-newstyle/ -type f -name graphql-engine` /bin/ && \
    strip --strip-unneeded /bin/graphql-engine && \
    upx /bin/graphql-engine


ARG ARG_IMAGE_FROM={{ dockerfile_builder_image_from }}
FROM ${ARG_IMAGE_FROM}

# General variables
ENV IMAGE_NAME=graphql-engine-build \
    IMAGE_SUMMARY="Graphql-engine build image based on {{ dockerfile_builder_image_based }}" \
    IMAGE_DESCRIPTION="{{ dockerfile_builder_image_based }} based image" \
    IMAGE_TITLE="Graphql-engine build image based on {{ dockerfile_builder_image_based }}"

COPY --from=graphql-engine-builder /usr/bin/pg_dump /usr/bin/pg_dump
COPY --from=graphql-engine-builder /bin/graphql-engine /bin/graphql-engine
{% endif %}
{% if ansible_host == 'graphql-engine' %}
ARG ARG_IMAGE_FROM={{ dockerfile_builder_image_from }}
FROM ${ARG_IMAGE_FROM}

# General variables
ENV IMAGE_NAME=graphql-engine \
    IMAGE_SUMMARY="Graphql-engine image based on {{ dockerfile_builder_image_based }}" \
    IMAGE_DESCRIPTION="{{ dockerfile_builder_image_based }} based image" \
    IMAGE_TITLE="Graphql-engine image based on {{ dockerfile_builder_image_based }}"

# Container variables
ENV CTR_USER=hasura \
    CTR_USER_ID="1001"

COPY --from=quay.io/krestomatio/graphql-engine-build:{{ graphql_engine_version }} /bin/graphql-engine /bin/graphql-engine

COPY --from=quay.io/krestomatio/graphql-engine-build:{{ graphql_engine_version }} /usr/bin/pg_dump /usr/bin/pg_dump

COPY --from=hasura/graphql-engine:v{{ graphql_engine_version }} /srv/ /srv

RUN containeruser-create

USER ${CTR_USER_ID}

CMD ["graphql-engine", "serve"]

# Labels
LABEL name="${IMAGE_NAME}" \
    summary="${IMAGE_SUMMARY}" \
    maintainer="{{ dockerfile_builder_image_authors }}" \
    description="${IMAGE_DESCRIPTION}" \
    org.opencontainers.image.title="${IMAGE_TITLE}" \
    org.opencontainers.image.authors="{{ dockerfile_builder_image_authors }}" \
    org.opencontainers.image.description="${IMAGE_DESCRIPTION}" \
    io.k8s.description="${IMAGE_DESCRIPTION}" \
    io.k8s.display-name="${IMAGE_TITLE}" \
    io.openshift.tags="${IMAGE_NAME},{{ dockerfile_builder_image_ocp_tags }}"
{% endif %}
