# {{ ansible_managed  }}
FROM {{ dockerfile_builder_image_from }}

# General variables
ENV IMAGE_name=ansible-docker-ci \
    IMAGE_summary="Ansible image based on {{ dockerfile_builder_image_based }} for Continuous Integration" \
    IMAGE_description="{{ dockerfile_builder_image_based }} based image with Ansible and tools like Docker, Skopeo and Molecule, for CI" \
    IMAGE_title="Ansible CI image based on {{ dockerfile_builder_image_based }}"

# Container variables
ENV ANSIBLE_version="{{ image_ansible_version }}" \
    MOLECULE_version="{{ molecule_version }}" \
    CTR_apk="apk add --update --no-cache" \
    CTR_pip="pip install --no-cache --upgrade" \
    DOCKER_HOST=unix:///var/run/docker.sock

RUN echo "Build tools..."  && \
    $CTR_apk py-pip openssl ca-certificates && \
    $CTR_apk --virtual build-dependencies python3-dev \
        libffi-dev openssl-dev build-base  && \
    $CTR_pip cffi pip && \
    $CTR_pip ansible~=$ANSIBLE_version && \
    $CTR_pip molecule~=$MOLECULE_version && \
    echo "Installing aditional python tools..."  && \
    $CTR_pip yamllint ansible-lint pycrypto pywinrm docker git-semver commitizen && \
    echo "Cleaning..."  && \
    apk del build-dependencies && \
    rm -rf /var/cache/apk/* && \
    rm -rf /tmp/* && \
    rm -rf ~/.cache && \
    echo "Minimal ansible config" && \
    mkdir -p /etc/ansible && \
    echo 'localhost' > /etc/ansible/hosts

RUN echo "Installing other tools..."  && \
    $CTR_apk bash xz gzip tar git rsync jq sudo sshpass openssh-client skopeo curl && \
    echo "Cleaning..."  && \
    rm -rf /var/cache/apk/* && \
    rm -rf /tmp/* && \
    rm -rf ~/.cache

RUN sed -i "s@bin/ash@bin/bash@" /etc/passwd && \
    ln -svf bash /bin/sh

{% if jx2_version is defined and jx2_version %}
ENV JX_VERSION="{{ jx2_version }}"
ENV JX_HOME=/home/.jx
RUN echo "Installing jx2 version: ${JX_VERSION}..."  && \
    cd /tmp && \
    curl -L https://github.com/jenkins-x/jx/releases/download/v${JX_VERSION}/jx-linux-amd64.tar.gz | tar xzv && \
    sudo mv jx /usr/bin/{{ jx2_binary_name | default('jx') }} && \
    echo "Cleaning..."  && \
    rm -rf /tmp/* && \
    cd /

{% endif %}
{% if jx3_version is defined and jx3_version %}
ENV JX3_VERSION="{{ jx3_version }}"
ENV JX3_HOME=/home/.jx3
RUN echo "Installing jx3 version: ${JX3_VERSION}..."  && \
    cd /tmp && \
    curl -L https://github.com/jenkins-x/jx-cli/releases/download/v${JX3_VERSION}/jx-cli-linux-amd64.tar.gz | tar xzv && \
    mv jx /usr/bin/{{ jx3_binary_name | default('jx') }} && \
    echo "Pre-load jx3 plugins..."  && \
    # {{ jx3_binary_name | default('jx') }} upgrade plugins --mandatory && \
    {{ jx3_binary_name | default('jx') }} gitops version && \
    echo "Cleaning..."  && \
    rm -rf /tmp/* && \
    cd /

{% endif %}
{% if oras_version is defined and oras_version %}
ENV ORAS_VERSION="{{ oras_version }}"
RUN echo "Installing oras version: ${ORAS_VERSION}..."  && \
    cd /tmp && \
    curl -L https://github.com/deislabs/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz | tar xzv && \
    mv oras /usr/bin/{{ oras_binary_name | default('oras') }} && \
    echo "Cleaning..."  && \
    rm -rf /tmp/* && \
    cd /

{% endif %}
CMD [ "ansible-playbook", "--version" ]

# Labels
LABEL name="${IMAGE_name}" \
      summary="${IMAGE_summary}" \
      maintainer="{{ dockerfile_builder_image_authors }}" \
      description="${IMAGE_description}" \
      org.opencontainers.image.title="${IMAGE_title}" \
      org.opencontainers.image.authors="{{ dockerfile_builder_image_authors }}" \
      org.opencontainers.image.description="${IMAGE_description}" \
      io.k8s.description="${IMAGE_description}" \
      io.k8s.display-name="${IMAGE_title}" \
      io.openshift.tags="${IMAGE_name},{{ dockerfile_builder_image_ocp_tags }}"
