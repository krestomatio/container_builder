- when:
    - not ansible_check_mode
    - ansible_host | regex_search('(centos|rocky)*.*-minimal')
  vars:
    dockerfile_builder_image: "{{ build_container_image }}:build-cache-{{ ctr_name }}"
    dockerfile_builder_tags: []
  block:
  - name: build image
    vars:
      dockerfile_builder_force: true
    include_role:
      name: dockerfile_builder

  - name: enable arm64 emulation
    when: docker_config_arm64_emulation | default(false) | bool
    run_once: true
    command: "{{ dockerfile_builder }} run --privileged --rm tonistiigi/binfmt --install arm64"

  - name: extract pkg list
    when: dockerfile_builder_image_info is defined and dockerfile_builder_image_info
    loop: "{{ dockerfile_builder_platforms }}"
    register: prepare_distro_release_task
    changed_when: false
    throttle: 1
    environment: "{{ {'DOCKER_CONTEXT': prepare_distro_release_docker_context}
      if dockerfile_builder_use_buildx | default(false) and
      prepare_distro_release_docker_context_exists else {} }}"
    vars:
      prepare_distro_release_docker_context: "{{ 'multiarch-builder-' + item.split('/')[1] }}"
      prepare_distro_release_docker_context_exists: "{{ lookup('pipe','docker context inspect ' +
        prepare_distro_release_docker_context + ' 1>/dev/null && echo True || echo False') |
        default(false,true) | bool }}"
      prepare_distro_release_image_manifest:
        "{{ dockerfile_builder_image_info.manifest.manifests | default([])
          | selectattr('platform.os', 'equalto', item.split('/')[0])
          |  selectattr('platform.architecture', 'equalto', item.split('/')[1]) | first
        if
          dockerfile_builder_image_info.manifest.manifests is defined
        else
          dockerfile_builder_image_info.manifest }}"
      prepare_distro_release_image_digest: "{{ prepare_distro_release_image_manifest.digest }}"
      prepare_distro_release_image: "{{ dockerfile_builder_image }}@{{ prepare_distro_release_image_digest }}"
      prepare_distro_release_pkg_list_file: pkg_list_{{ item | replace('/','_') }}
    args:
      chdir: "{{ dockerfile_builder_path }}"
    shell: >-
      {{ dockerfile_builder + (' buildx' if dockerfile_builder_use_buildx else '') }} build
      --target=pkg_list --platform="{{ item }}" --cache-from={{ prepare_distro_release_image }}
      --output /tmp/pkg_list . 2>/dev/null && cat /tmp/pkg_list/{{ prepare_distro_release_pkg_list_file }}

  - name: assert distro release packages info
    when: prepare_distro_release_task.results is defined and prepare_distro_release_task.results
    loop: "{{ prepare_distro_release_task.results }}"
    no_log: true
    assert:
      that: item | default([]) | length > 0
      fail_msg: "pkg-list is empty"
      quiet: true

  - name: save new distro release
    when: prepare_distro_release_task.results is defined and prepare_distro_release_task.results
    set_fact:
      centos_distro_release: "{{ prepare_distro_release_task.results[0].stdout_lines
        | map('regex_search',distro_version_regex) | select('string') | first }}"

  - name: set version based on distro-release
    when: centos_distro_release is defined
    set_fact:
      version_image_major: "{{ centos_distro_release.split('.')[0] |
        default(false) }}"
      version_image_minor: "{{ centos_distro_release.split('.')[1].split('-')[0] |
        default(false) }}"
      version_image_patch: "{{ centos_distro_release.split('.')[1].split('-')[1] |
        default(centos_distro_release.split('.')[2]) | default(false) }}"

  - name: store pkg-list
    when: item is not skipped
    loop: "{{ prepare_distro_release_task.results }}"
    no_log: true
    register: prepare_store_pkg_list_task
    copy:
      dest: "{{ pkgs_list_dest }}_{{ item.item.split('/')[0] }}_{{ item.item.split('/')[1] }}"
      content: |
        {% for line in item.stdout_lines | sort %}
        {{ line }}
        {% endfor %}

  - name: force build or omit it if pkg list has changed
    set_fact:
      dockerfile_builder_build_omit: "{{ prepare_store_pkg_list_task is not changed }}"
      dockerfile_builder_force_source: "{{ prepare_store_pkg_list_task is changed }}"
      dockerfile_builder_force: "{{ prepare_store_pkg_list_task is changed }}"
